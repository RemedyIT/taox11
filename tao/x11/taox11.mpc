// -*- MPC -*-

project(ridl_orb_idl) : pidlc_defaults {
  custom_only = 1
  PIDLC_Files {
    gendir = $(TAOX11_ROOT)/ridlbe/c++11
    orb.idl
  }
}

project(taox11_core_idl) : ridl_core_defaults, install, pidl_install {
  custom_only = 1
  idlflags += -SS -Sorb -Gp -Gd -Gatc -o . \
              -I $(TAO_ROOT) \
              -Wb,export_macro=TAOX11_Export \
              -Wb,export_include=tao/x11/base/taox11_export.h \
              -Wb,anytypecode_export_macro=TAOX11_AnyTypeCode_Export \
              -Wb,anytypecode_export_include=tao/x11/anytypecode/taox11_anytypecode_export.h

  idlflags -= -Sa -St

  idlflags += --namespace TAOX11_NAMESPACE

  IDL_Files {
    gendir = .
    $(TAO_ROOT)/tao/Messaging_SyncScope.pidl >> Messaging_SyncScopeA.cpp
    $(TAO_ROOT)/tao/PI_Forward.pidl >> PI_ForwardA.cpp
    $(TAO_ROOT)/tao/PortableInterceptor.pidl >> PortableInterceptorA.cpp
    $(TAO_ROOT)/tao/IOP.pidl >> IOPA.cpp
    $(TAO_ROOT)/tao/TAO.pidl >> TAOA.cpp
    $(TAO_ROOT)/tao/Messaging_PolicyValue.pidl >> Messaging_PolicyValueA.cpp
    $(TAO_ROOT)/tao/Current.pidl >> CurrentA.cpp
    $(TAO_ROOT)/tao/Services.pidl >> ServicesA.cpp
  }

  IDL_Files {
    gendir = .
    idlflags += -Gos
    $(TAO_ROOT)/tao/TimeBase.pidl >> TimeBaseA.cpp
  }

  IDL_Files {
    gendir = .
    idlflags += -Glons
    $(TAO_ROOT)/tao/Policy_Forward.pidl >> Policy_ForwardA.cpp
    $(TAO_ROOT)/tao/Policy_Manager.pidl >> Policy_ManagerA.cpp
    $(TAO_ROOT)/tao/Policy_Current.pidl >> Policy_CurrentA.cpp
  }

  IDL_Files {
    idlflags -= -Wb,export_macro=TAOX11_Export \
                -Wb,export_include=tao/x11/base/taox11_export.h
    idlflags += -Sots \
                -Wb,export_macro=TAOX11_AnyTypeCode_Export \
                -Wb,export_include=tao/x11/anytypecode/taox11_anytypecode_export.h
    idlflags += -Gos
    gendir = .
    $(TAO_ROOT)/tao/Typecode_types.pidl >> Typecode_typesA.cpp
  }

  IDL_Files {
    gendir = .
    $(TAO_ROOT)/tao/orb_types.pidl >> orb_typesA.cpp
    $(TAO_ROOT)/tao/CONV_FRAME.pidl >> CONV_FRAMEA.cpp
    $(TAO_ROOT)/tao/ParameterMode.pidl >> ParameterModeA.cpp
  }

  IDL_Files {
    idlflags += -Gaia -Gos
    gendir = .
    $(TAO_ROOT)/tao/BooleanSeq.pidl >> BooleanSeqA.cpp
    $(TAO_ROOT)/tao/CharSeq.pidl >> CharSeqA.cpp
    $(TAO_ROOT)/tao/DoubleSeq.pidl >> DoubleSeqA.cpp
    $(TAO_ROOT)/tao/FloatSeq.pidl >> FloatSeqA.cpp
    $(TAO_ROOT)/tao/LongDoubleSeq.pidl >> LongDoubleSeqA.cpp
    $(TAO_ROOT)/tao/LongLongSeq.pidl >> LongLongSeqA.cpp
    $(TAO_ROOT)/tao/LongSeq.pidl >> LongSeqA.cpp
    $(TAO_ROOT)/tao/OctetSeq.pidl >> OctetSeqA.cpp
    $(TAO_ROOT)/tao/ShortSeq.pidl >> ShortSeqA.cpp
    $(TAO_ROOT)/tao/StringSeq.pidl >> StringSeqA.cpp
    $(TAO_ROOT)/tao/ULongLongSeq.pidl >> ULongLongSeqA.cpp
    $(TAO_ROOT)/tao/ULongSeq.pidl >> ULongSeqA.cpp
    $(TAO_ROOT)/tao/UShortSeq.pidl >> UShortSeqA.cpp
    $(TAO_ROOT)/tao/WCharSeq.pidl >> WCharSeqA.cpp
    $(TAO_ROOT)/tao/WStringSeq.pidl >> WStringSeqA.cpp
  }

  //PidlInstallWithoutBuilding_Files {
  //  InterfaceDef.pidl
  //  InvalidName.pidl
  //  Object_Key.pidl
  //  WrongTransaction.pidl
  //  orb.idl
  //}
}

project(taox11) : taox11_defaults, taolib {
  after += taox11_core_idl
  sharedname = taox11
  libout = $(X11_BASE_ROOT)/lib
  dynamicflags += TAOX11_BUILD_DLL

  Source_Files {
    CurrentC.cpp
    orb_typesC.cpp
    Policy_ForwardC.cpp
    Policy_ManagerC.cpp
    Policy_CurrentC.cpp
    PolicyC.cpp
    ServicesC.cpp
    BooleanSeqC.cpp
    CharSeqC.cpp
    DoubleSeqC.cpp
    FloatSeqC.cpp
    CONV_FRAMEC.cpp
    ParameterModeC.cpp
    LongDoubleSeqC.cpp
    LongLongSeqC.cpp
    LongSeqC.cpp
    OctetSeqC.cpp
    ShortSeqC.cpp
    StringSeqC.cpp
    ULongLongSeqC.cpp
    ULongSeqC.cpp
    UShortSeqC.cpp
    WCharSeqC.cpp
    WStringSeqC.cpp
    IOPC.cpp
    Messaging_PolicyValueC.cpp
    Messaging_SyncScopeC.cpp
//    PI_ForwardC.cpp
//    PortableInterceptorC.cpp
    TimeBaseC.cpp
  }

  Source_Files {
    log.cpp
    orb.cpp
    orb_registry.cpp
    object.cpp
    object_loader.cpp
    stub_arg_traits.cpp
    exception.cpp
    system_exception.cpp
    user_exception.cpp
    user_exception_proxy_out.cpp
    valuefactory_manager_adapter.cpp
    valuetype_adapter.cpp
    ifr_client_adapter.cpp
    nvlist_adapter.cpp
    dynamic_adapter.cpp
    typecode_factory_adapter.cpp
    policyfactory_manager_adapter.cpp
    policy_current_impl.cpp
    policy_manager_impl.cpp
    anyinsert_adapter.cpp
  }

  Header_Files {
    BooleanSeqC.h
    BooleanSeqCP.h
    BooleanSeqS.h
    BooleanSeqSP.h
    CONV_FRAMEC.h
    CONV_FRAMECP.h
    CONV_FRAMES.h
    CONV_FRAMESP.h
    CharSeqC.h
    CharSeqCP.h
    CharSeqS.h
    CharSeqSP.h
    CurrentC.h
    CurrentCP.h
    CurrentS.h
    CurrentSP.h
    DoubleSeqC.h
    DoubleSeqCP.h
    DoubleSeqS.h
    DoubleSeqSP.h
    FloatSeqC.h
    FloatSeqCP.h
    FloatSeqS.h
    FloatSeqSP.h
    IOPC.h
    IOPCP.h
    IOPS.h
    IOPSP.h
    LongDoubleSeqC.h
    LongDoubleSeqCP.h
    LongDoubleSeqS.h
    LongDoubleSeqSP.h
    LongLongSeqC.h
    LongLongSeqCP.h
    LongLongSeqS.h
    LongLongSeqSP.h
    LongSeqC.h
    LongSeqCP.h
    LongSeqS.h
    LongSeqSP.h
    Messaging_PolicyValueC.h
    Messaging_PolicyValueCP.h
    Messaging_PolicyValueS.h
    Messaging_PolicyValueSP.h
    Messaging_SyncScopeC.h
    Messaging_SyncScopeCP.h
    Messaging_SyncScopeS.h
    Messaging_SyncScopeSP.h
    OctetSeqC.h
    OctetSeqCP.h
    OctetSeqS.h
    OctetSeqSP.h
    PI_ForwardC.h
    PI_ForwardCP.h
    PI_ForwardS.h
    PI_ForwardSP.h
    ParameterModeC.h
    ParameterModeCP.h
    ParameterModeS.h
    ParameterModeSP.h
    PolicyC.h
    PolicyP.h
    PolicyS.h
    PolicySP.h
    Policy_CurrentC.h
    Policy_CurrentCP.h
    Policy_CurrentS.h
    Policy_CurrentSP.h
    Policy_ForwardC.h
    Policy_ForwardCP.h
    Policy_ForwardS.h
    Policy_ForwardSP.h
    Policy_ManagerC.h
    Policy_ManagerCP.h
    Policy_ManagerS.h
    Policy_ManagerSP.h
    PortableInterceptorC.h
    PortableInterceptorCP.h
    PortableInterceptorS.h
    PortableInterceptorSP.h
    ServicesC.h
    ServicesCP.h
    ServicesS.h
    ServicesSP.h
    ShortSeqC.h
    ShortSeqCP.h
    ShortSeqS.h
    ShortSeqSP.h
    StringSeqC.h
    StringSeqCP.h
    StringSeqS.h
    StringSeqSP.h
    TAOC.h
    TAOCP.h
    TAOS.h
    TAOSP.h
    TimeBaseC.h
    TimeBaseCP.h
    TimeBaseS.h
    TimeBaseSP.h
    Typecode_typesC.h
    Typecode_typesCP.h
    Typecode_typesS.h
    Typecode_typesSP.h
    ULongLongSeqC.h
    ULongLongSeqCP.h
    ULongLongSeqS.h
    ULongLongSeqSP.h
    ULongSeqC.h
    ULongSeqCP.h
    ULongSeqS.h
    ULongSeqSP.h
    UShortSeqC.h
    UShortSeqCP.h
    UShortSeqS.h
    UShortSeqSP.h
    WCharSeqC.h
    WCharSeqCP.h
    WCharSeqS.h
    WCharSeqSP.h
    WStringSeqC.h
    WStringSeqCP.h
    WStringSeqS.h
    WStringSeqSP.h
    amic_traits_t.h
    anyinsert_adapter.h
    anyinsert_policy_t.h
    arg_traits_t.h
    array_cdr_t.h
    basic_argument_t.h
    basic_arguments.h
    base/basic_traits.h
    base/bounded_map_t.h
    base/bounded_string_t.h
    base/bounded_type_traits_t.h
    base/bounded_vector_t.h
    bounded_string_cdr_t.h
    cdr_long_double.h
    corba.h
    dynamic_adapter.h
    exception.h
    exception_macros.h
    fixed_t.h
    base/idl_traits_t.h
    ifr_client_adapter.h
    ifr_client_adapter_impl_base.h
    log.h
    long_double_argument_t.h
    map_cdr_t.h
    nvlist_adapter.h
    object.h
    object_fwd.h
    object_loader.h
    object_ostream.h
    object_traits_t.h
    objproxy.h
    optional_t.h
    optional_cdr_t.h
    orb.h
    orb_constants.h
    orb_registry.h
    orb_typesC.h
    orb_typesCP.h
    orb_typesS.h
    orb_typesSP.h
    orbproxy.h
    policyfactory_manager_adapter.h
    base/pre.h
    base/post.h
    sequence_cdr_t.h
    sequence_conversion_t.h
    special_basic_argument_t.h
    special_basic_arguments.h
    base/stddef.h
    stub_arg_traits.h
    system_exception.h
    system_exception_x11.h
    base/tao_corba.h
    base/taox11_export.h
    base/taox11_export_macros.h
    typecode_factory_adapter.h
    user_exception.h
    user_exception_proxy_in_t.h
    user_exception_proxy_out.h
    valuefactory_manager_adapter.h
    valuetype_adapter.h
    base/versioned_x11_namespace.h
    base/versionx11.h
    base/wstringwchar_ostream.h
  }

  Header_Files {
  }

  Template_Files {
    basic_argument_t.cpp
    special_basic_argument_t.cpp
    user_exception_proxy_in_t.cpp
    long_double_argument_t.cpp
  }

}
