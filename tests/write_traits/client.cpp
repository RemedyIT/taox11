/**
 * @file    client.cpp
 * @author  Unknown
 * @brief   Client main
 *
 * Generated by 'brix11 generate client' @ 2014-03-02 15:41:45 +0100
 *
 * @copyright Copyright (c) Remedy IT Expertise BV
 */

#include "write_traitsC.h"
#include "ace/Get_Opt.h"
#include "testlib/taox11_testlog.h"

std::string ior = "file://server.ior";

bool
parse_args (int argc, ACE_TCHAR *argv[])
{
  ACE_Get_Opt get_opts (argc, argv, ACE_TEXT("k:"));
  int c;

  while ((c = get_opts ()) != -1)
    switch (c)
      {
      case 'k':
        ior = get_opts.opt_arg ();
        break;

      case '?':
      default:
        TAOX11_TEST_ERROR << "usage: -k <ior>"
              << std::endl;
        return false;
      }
  // Indicates successful parsing of the command line
  return true;
}

int main(int argc, char* argv[])
{
  try
    {
      IDL::traits<CORBA::ORB>::ref_type _orb = CORBA::ORB_init (argc, argv);

      if (_orb == nullptr)
        {
          TAOX11_TEST_ERROR
            << "ERROR: CORBA::ORB_init (argc, argv) returned null ORB."
            << std::endl;
          return 1;
        }

      if (parse_args (argc, argv) == false)
        return 1;

      IDL::traits<CORBA::Object>::ref_type obj = _orb->string_to_object (ior);

      if (!obj)
        {
        TAOX11_TEST_ERROR
            << "ERROR: string_to_object(<ior>) returned null reference."
            << std::endl;
          return 1;
        }

      TAOX11_TEST_INFO << "retrieved object reference" << std::endl;

      IDL::traits<Test::Foo>::ref_type foo_obj = IDL::traits<Test::Foo>::narrow (obj);

      if (!foo_obj)
        {
        TAOX11_TEST_ERROR
            << "ERROR: IDL::traits<Test::Foo>::narrow (obj) returned null object."
            << std::endl;
          return 1;
        }

      IDL::traits<Test::Foo>::write_on (TAOX11_TEST_INFO << "narrowed Test::Foo interface = ", foo_obj) << std::endl;

      // Initialize data
      Test::Array a { { 0, 2, 4, 8, 16, 32, 64, 128, 256, 512} };
      Test::Matrix m;
      for (uint8_t b1=0; b1 < 16 ;++b1)
        for (uint8_t b2=0; b2 < 16 ;++b2)
          m[b1][b2] = (b1*16)+b2;
      Test::StringList sl;
      sl.push_back("string1");
      sl.push_back("string2");
      sl.push_back("string3");
      sl.push_back("string4");
      sl.push_back("string5");
      Test::Alphabet abc;
      for (char c='a'; c<='z' ;++c)
        abc.push_back(c);
      Test::Person p ("Thomas Crown", "Unknown Street", 43, Test::Person::TSex::male);
      Test::Option opt;

      // write data
      TAOX11_TEST_INFO << "Array a = " << IDL::traits<Test::Array>::write(a) << std::endl;
      IDL::traits<Test::Matrix>::write_on (TAOX11_TEST_INFO << "Matrix m = ", m) << std::endl;
      TAOX11_TEST_INFO << "StringList sl = " << IDL::traits<Test::StringList>::write(sl) << std::endl;
      IDL::traits<Test::Alphabet>::write_on (TAOX11_TEST_INFO << "Alphabet abc = ", abc) << std::endl;

      foo_obj->write_on_servant (p);

      opt.message ("option message selected");
      TAOX11_TEST_INFO << "Option opt = " << IDL::traits<Test::Option>::write(opt) << std::endl;
      opt.number (42775);
      IDL::traits<Test::Option>::write_on (TAOX11_TEST_INFO << "Option opt = ", opt) << std::endl;

      TAOX11_TEST_INFO << "shutting down...";

      foo_obj->shutdown ();

      TAOX11_TEST_INFO << std::endl;

      _orb->destroy ();
    }
  catch (const std::exception& e)
    {
    TAOX11_TEST_ERROR << "exception caught: " << e << std::endl;
      return 1;
    }
  return 0;
}
