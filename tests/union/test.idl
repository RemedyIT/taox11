/**
 * @file    test.idl
 * @author  Mark Drijver
 *
 * @copyright Copyright (c) Remedy IT Expertise BV
 */

/// Put the interfaces in a module, to avoid global namespace pollution

struct Global
{
  long x;
};

module Test
{
  enum State {
    STATE_PASS,
    STATE_FAIL
  };

  enum Color {
    COLOR_RED,
    COLOR_BLUE
  };

  typedef string<512> BoundedString;
  typedef sequence <long> LongSeq;
  typedef long LongArray[12];
  typedef LongArray LongArrayArray[12];

  struct TestStruct {
    Test::LongSeq testSeq;
    long willFailHere;
  };

  struct TestStructArray {
    Test::LongArray testArray;
    long willFailHere;
  };

  struct TestStructArrayArray {
    Test::LongArrayArray testArray;
    long willFailHere;
  };

  union TestUnion_U1 switch(Color) {
    case COLOR_BLUE:
      Test::State FirstCase;
    case COLOR_RED:
      Test::TestStruct SecondCase;
  };

  union TestUnion_U2 switch(Color) {
    case COLOR_RED:
      Test::TestStruct SecondCase;
    case COLOR_BLUE:
      Test::State FirstCase;
  };

  union TestUnion_U3 switch(Color) {
    default:
      Test::State FirstCase;
    case COLOR_RED:
      Test::TestStruct SecondCase;
  };

  union TestUnion_U4 switch(Color) {
    case COLOR_BLUE:
      Test::State FirstCase;
    case COLOR_RED:
      Test::TestStructArray SecondCase;
  };

  union TestUnion_U5 switch(Color) {
    case COLOR_RED:
      Test::TestStructArray SecondCase;
    case COLOR_BLUE:
      Test::State FirstCase;
  };

  union TestUnion_U6 switch(Color) {
    default:
      Test::TestStructArray SecondCase;
    case COLOR_BLUE:
      Test::State FirstCase;
  };

  union TestUnion_U7 switch(Color) {
    case COLOR_RED:
      Test::TestStructArrayArray SecondCase;
    case COLOR_BLUE:
      Test::State FirstCase;
  };

  typedef string<25> first_name_t;
  typedef string<10> middle_name_t;
  typedef string<40> last_name_t;

  enum NameType
  {
    ntFirst,
    ntMiddle,
    ntLast
  };

  enum DataType
  {
    dtEmpty,
    dtLong,
    dtShort,
    dtString,
    dtPoint,
    dtTrack,
    dtGlobal
  };

  struct Point
  {
    long x;
    long y;
  };

  struct Track
  {
    long id;
    Point p;
  };

  union BoolUnion1 switch (boolean)
  {
    case TRUE:
    case FALSE: long dummyVal;
  };

  union BoolUnion2 switch (boolean)
  {
    case TRUE:
    default: long dummyVal;
  };

  union BoolUnion3 switch (boolean)
  {
    default: long dummyVal;
  };

  union BoolUnion4 switch (boolean)
  {
    case TRUE: long dummyVal;
  };

  union BoolUnion5 switch (boolean)
  {
    case FALSE: long dummyVal;
  };

  union BoolUnion6 switch (boolean)
  {
    case TRUE: long dummyVal;
    case FALSE: string dummyStr;
  };

  union BoolUnion7 switch (boolean)
  {
    case FALSE: long dummyVal;
    default: string dummyStr;
  };

  union Name switch (NameType)
  {
    case ntFirst: first_name_t firstName;
    case ntMiddle: middle_name_t middleName;
    case ntLast: last_name_t lastName;
  };

  union Data switch (DataType)
    {
      case dtLong: long longData;
      case dtShort: short shortData;
      case dtString: string stringData;
      case dtPoint: Point pointData;
      case dtTrack: Track trackData;
      case dtGlobal: Global globalData;
      // by default (implicit), empty union
    };

  union DefaultData switch (short)
    {
      case 1: long longData;
      case 2: short shortData;
      default: long defData;
    };

  // Union, with implicit default, default
  // becomes first member of union. This will test
  // the fix for order of members, with a, to allocate, type
  // as first member.
  union X_Union switch (short)
    {
      case 0: string x_test;
      case 1: long   x_long;
    };

  // Union, with implicit default, default
  // becomes first member of union. This will test
  // the fix for order of members, with a numeric type
  // as first member.
  union Y_Union switch (short)
    {
      case 0: long   y_long;
      case 1: string y_test;
    };

  // Union with several cases
  union Z_Union switch (short)
    {
      case 0: long z_long;
      case 1:
      case 2:
      case 3: string z_string;
      case 4: boolean z_bool;
    };

  enum Assignment
  {
    NONE,
    A,
    B,
    C,
    D
  };

  struct B01 {
    long b01_1;
  };

  struct B02 {
    string b02_1;
  };

  union B03 switch (long)
  {
    case 0: B01 b_03_1;
    case 1: B02 b_03_2;
    case 2: short b_03_3;
    case 3: long b_03_4;
    case 4: string b_03_5;
    default: short b_03_d;
  };

  struct UnionMessage {
    Assignment a;
    B03 b_03;
    Data d;
  };

  enum enumType
  {
    g,
    h,
    i
  };
  typedef enumType arrayofenum[5];
  typedef long arrayoflong[5];
  typedef arrayofenum arrayarrayofenum[5];
  typedef arrayoflong arrayarrayoflong[5];
  typedef arrayarrayoflong arrayarrayarrayoflong[5];

  union unionarrayarrayarrayoflong switch (long)
  {
    default: arrayarrayarrayoflong aaal;
    case 1: long b;
  };

  union unionarrayarrayoflong switch (long)
  {
    default: arrayarrayoflong aal;
    case 1: long b;
  };

  union unionarrayoflong switch (long)
  {
    default: arrayoflong al;
    case 1: long b;
  };

  union unionarrayarrayofenum switch (long)
  {
    default: arrayarrayofenum aae;
    case 1: long b;
  };

  union unionarrayofenum switch (long)
  {
    default: arrayofenum ae;
    case 1: long b;
  };

  typedef string arrayofstring[5];
  union unionarrayofstring switch (long)
  {
    default: arrayofstring as;
    case 1: long b;
  };
  typedef string multidimarrayofstring[1][2][3];
  union uniondimarrayofstring switch (long)
  {
    default: multidimarrayofstring mdas;
    case 1: long b;
  };

  /// A very simple interface
  interface Foo
  {
    boolean pass_union (in Data s);
    boolean pass_default_union (in DefaultData s);

    Data return_union ();
    DefaultData return_default_union ();
    X_Union return_x_union ();
    Y_Union return_y_union ();
    Z_Union return_z_union (in Z_Union z);

    boolean get_union (out Data s);
    boolean get_default_union (out DefaultData dd);

    boolean update_union (inout Data s);
    boolean update_default_union (inout DefaultData dd);

    boolean send_unionmessage(in UnionMessage msg);

    /// A method to shutdown the ORB
    /**
     * This method is used to simplify the test shutdown process
     */
    oneway void shutdown ();
  };
};
