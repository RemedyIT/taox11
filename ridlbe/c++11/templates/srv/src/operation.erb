% unless is_inherited?
// generated from <%= ridl_template_path %>
void <%= interface.scoped_srvproxy_cxxname %>::<%= name %>_skel (
    TAO_ServerRequest & server_request,
    TAO::Portable_Server::Servant_Upcall * TAO_INTERCEPTOR (servant_upcall),
    <%= interface.scoped_srvproxy_cxxname %>::skel_type & servant)
{
%   if has_raises? && generate_typecode_support?
#if TAO_HAS_INTERCEPTORS == 1
  static TAO_CORBA::TypeCode_ptr const exceptions[] =
    {
% first_raise = true
%   raises.each do |_ex|
      <%= first_raise ? '':',' %>TC_helper::get_tao_tc(::<%= _ex.scoped_cxx_typecode %>)
% first_raise = false
%    end
    };
#endif /* TAO_HAS_INTERCEPTORS */

% end
%     unless is_oneway? || is_void?
  PS::SArg_Traits<<%= scoped_cxx_arg_type %>>::ret_val _taox11_retval;
%     else
  PS::SArg_Traits<void>::ret_val _taox11_retval;
%     end
%     arguments.each do |_arg|
%       case _arg.direction
%       when :in
  PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::in_arg_val _taox11_<%= _arg.cxxname %>;
%       when :out
  PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::out_arg_val _taox11_<%= _arg.cxxname %>;
%       when :inout
  PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::inout_arg_val _taox11_<%= _arg.cxxname %>;
%       end
%     end

  TAO::Argument * const args[] =
    {
      std::addressof(_taox11_retval)
%     arguments.each do |_arg|
      , std::addressof(_taox11_<%= _arg.cxxname %>)
%     end
    };

  TAOX11_NAMESPACE::Upcall_Command command (
    [&]() {
%   unless is_oneway? || is_void?
      PS::SArg_Traits<<%= scoped_cxx_arg_type %>>::ret_arg_type retval =
%     if generate_thrupoa_collocation?
        PS::get_ret_arg<<%= scoped_cxx_arg_type %>> (server_request.operation_details (), args);
%     else
        _taox11_retval.arg ();
%     end
%   end
%   arguments.each_with_index do |_arg, _ix|
%     if generate_thrupoa_collocation?
%       case _arg.direction
%       when :in
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::in_arg_type <%= _arg.cxxname %> =
        std::move (PS::get_in_arg<<%= _arg.scoped_cxx_arg_type %>> (server_request.operation_details (), args, <%= _ix+1 %>));
%       when :out
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::out_arg_type <%= _arg.cxxname %> =
        PS::get_out_arg<<%= _arg.scoped_cxx_arg_type %>> (server_request.operation_details (), args, <%= _ix+1 %>);
%       when :inout
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::inout_arg_type <%= _arg.cxxname %> =
        PS::get_inout_arg<<%= _arg.scoped_cxx_arg_type %>> (server_request.operation_details (), args, <%= _ix+1 %>);
%       end
%     else
%       case _arg.direction
%       when :in
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::in_arg_type <%= _arg.cxxname %> =
        std::move (_taox11_<%= _arg.cxxname %>.arg ());
%       when :out
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::out_arg_type <%= _arg.cxxname %> =
        _taox11_<%= _arg.cxxname %>.arg ();
%       when :inout
      PS::SArg_Traits<<%= _arg.scoped_cxx_arg_type %>>::inout_arg_type <%= _arg.cxxname %> =
        _taox11_<%= _arg.cxxname %>.arg ();
%       end
%     end
%   end
%   _args = arguments.dup
%   _arg = _args.shift
%   _s = _arg ? (_arg.cxxname) : ''
%   _s += (_args.empty? ? ');' : ',')
%   unless is_oneway? || is_void?
      retval = servant.<%= cxxname %> (<%= _s %>
%   else
      servant.<%= cxxname %> (<%= _s %>
%   end
%   while !_args.empty?
%     _arg = _args.shift
                <%= _arg.cxxname %><%= _args.empty? ? ');' : ',' %>
%   end
    } );

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , <%= 1+argument_count %> // Number of arguments in the args array
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
%  if has_raises? && generate_typecode_support?
                         , exceptions
                         , <%= raises.size %>
%  else
                         , nullptr // No user exceptions declared
                         , 0
%  end
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

% end
