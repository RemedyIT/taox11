// generated from <%= ridl_template_path %>

inline <%= scoped_cxxname %>::u_type_::u_type_ ()
% if has_default?()
  : <%= default_member.cxxname %>_ <% if default_member.is_array? %>{{}}<% else %>{}<% end %>
% else
  : <%= members.first.cxxname %>_ <% if members.first.is_array? %> {{}}<% else %>{}<% end %>
% end
{
}

inline <%= scoped_cxxname %>::u_type_::~u_type_ ()
{
}

inline <%= scoped_cxxname %>::~<%= cxxname %> ()
{
  this->_clear ();
}

inline <%= scoped_cxxname %>::<%= cxxname %> (<%= scoped_cxx_in_type %> u)
  : disc_ (u.disc_)
{
% if switchtype_boolean?
%   _defmem = default_member
%   _ndefmem = non_default_members
%   if (_defmem && _ndefmem.empty?) || (!_ndefmem.empty? && _ndefmem.first.labels.size>1)
%     # in these cases there is only a single member mapping all labels
%     _m = _defmem || _ndefmem.shift
%     if _m.is_pod?
  this->u_.<%= _m.cxxname %>_ = u.u_.<%= _m.cxxname %>_;
%     else
  new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (u.u_.<%= _m.cxxname %>_);
%     end
%   else
%     # here we have 1 or 2 nondef members with or without a default
%     _m = _ndefmem.shift # get first non-default member
%     _lbl = _m.labels.first
  if (<%= _lbl == 'false' ? '!' : '' %>this->disc_)
  {
%     if _m.is_pod?
    this->u_.<%= _m.cxxname %>_ = u.u_.<%= _m.cxxname %>_;
%     else
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (u.u_.<%= _m.cxxname %>_);
%     end
  }
%     if _defmem || !_ndefmem.empty?
  else
  {
%     _m = _defmem || _ndefmem.shift # get other (non-)default member
%     if _m.is_pod?
    this->u_.<%= _m.cxxname %>_ = u.u_.<%= _m.cxxname %>_;
%     else
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (u.u_.<%= _m.cxxname %>_);
%     end
  }
%     end
%   end
% else
  switch (this->disc_)
  {
% members.each do |_m|
%   unless _m.is_default?
%     _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%     end
    {
%     if _m.is_pod?
      this->u_.<%= _m.cxxname %>_ = u.u_.<%= _m.cxxname %>_;
%     else
      new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (u.u_.<%= _m.cxxname %>_);
%     end
    }
    break;
%   end
% end
% if needs_switch_default?
    default:
%   if has_default?
%     _m_def = default_member
    {
%     if _m_def.is_pod?
      this->u_.<%= _m_def.cxxname %>_ = u.u_.<%= _m_def.cxxname %>_;
%     else
      new (std::addressof(this->u_.<%= _m_def.cxxname %>_)) <%= _m_def.cxx_member_type %> (u.u_.<%= _m_def.cxxname %>_);
%     end
    }
%   end
    break;
% end
  }
% end
}

inline <%= scoped_cxxname %>::<%= cxxname %> (<%= scoped_cxx_move_type %> u)
  : disc_ (std::move (u.disc_))
{
  this->_move_u (u);
}

inline void <%= scoped_cxxname %>::_d (<%= switch_in_cxxtype %> discval)
{
  if (this->disc_ != discval)
  {
% # in case a boolean switch has 1 or 2 non-default members with only a single label per member
% # any label change is invalid as is the case when all label values are mapped to a
% # single member
% _ndefmem = non_default_members
% if all_labels_single? || (switchtype_boolean? && (!_ndefmem.empty? && _ndefmem.first.labels.size==1))
    throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
% # with any other boolean switch (single member for all labels) all label changes are valid
% elsif switchtype_boolean?
    this->disc_ = discval;
% else
    switch (this->disc_)
    {
%   members.each do |_m|
%     unless _m.is_default?
%       _m.nondefault_labels.each do |_lbl|
      case <%= _lbl %>:
%       end
      {
        switch (discval)
        {
%       _m.nondefault_labels.each do |_lbl|
          case <%= _lbl %>:
%       end
            break;
          default:
            throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
        }
      }
      break;
%     end
%   end
%   if has_default?() || has_implicit_default?()
      default:
      {
        switch (discval)
        {
%     members.each do |_m|
%       _m.nondefault_labels.each do |_lbl|
          case <%= _lbl %>:
%       end unless _m.is_default?
%     end
            throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
          default:
            break;
        }
      }
      break;
%   end
    }
    this->disc_ = discval;
% end
  }
}
% members.each do |_m|

inline void <%= scoped_cxxname %>::<%= _m.cxxname %> (<%= _m.cxx_in_type %> _x11_<%= _m.cxxname %>)
{
%   _lbl = _m.is_default? ? default_label : _m.nondefault_labels.first
%   if switchtype_boolean?
  if (<%= _lbl == 'true' ? '!' : '' %>this->disc_)
%   else
  if (this->disc_ != <%= _lbl %>)
%   end
  {
    this->_clear ();
%   if _m.is_default?
    this->disc_ = <%= default_label %>;
%   else
    this->disc_ = <%= _m.nondefault_labels.first %>;
%   end
%   unless _m.is_pod?
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (_x11_<%= _m.cxxname %>);
  }
  else
  {
    this->u_.<%= _m.cxxname %>_ = _x11_<%= _m.cxxname %>;
  }
%   else
  }
  this->u_.<%= _m.cxxname %>_ = _x11_<%= _m.cxxname %>;
%   end
}
%   unless _m.is_pod? || _m.is_reference?

inline void <%= scoped_cxxname %>::<%= _m.cxxname %> (<%= _m.cxx_move_type %> _x11_<%= _m.cxxname %>)
{
%   if switchtype_boolean?
  if (<%= _lbl == 'true' ? '!' : '' %>this->disc_)
%   else
  if (this->disc_ != <%= _lbl %>)
%   end
  {
    this->_clear ();
%     if _m.is_default?
    this->disc_ = <%= default_label %>;
%     else
    this->disc_ = <%= _m.nondefault_labels.first %>;
%     end
%     unless _m.is_pod?
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (std::move (_x11_<%= _m.cxxname %>));
  }
  else
  {
    this->u_.<%= _m.cxxname %>_ = std::move (_x11_<%= _m.cxxname %>);
  }
%     else
  }
  this->u_.<%= _m.cxxname %>_ = std::move (_x11_<%= _m.cxxname %>);
%     end
}
%   end

inline <%= _m.scoped_cxx_in_type %> <%= scoped_cxxname %>::<%= _m.cxxname %> () const
{
%   if switchtype_boolean?
%     if _m.labels.size == 1
%       _lbl = _m.labels.first
  if (<%= _lbl == 'true' ? '!' : '' %>this->disc_)
  {
    throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
  }
%     end
%   else
  switch (this->disc_)
  {
%     if _m.is_default?
%       members.each do |_m2|
%         _m2.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%         end unless _m2.is_default?
%       end
      throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
    default:
      break;
%     else
%       _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%       end
      break;
    default:
      throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
%     end
  }
%   end
  return this->u_.<%= _m.cxxname %>_;
}

inline <%= _m.scoped_cxx_out_type %> <%= scoped_cxxname %>::<%= _m.cxxname %> ()
{
%   if switchtype_boolean?
%     if _m.labels.size == 1
%       _lbl = _m.labels.first
  if (<%= _lbl == 'true' ? '!' : '' %>this->disc_)
  {
    throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
  }
%     end
%   else
  switch (this->disc_)
  {
%     if _m.is_default?
%       members.each do |_m2|
%         _m2.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%         end unless _m2.is_default?
%       end
      throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
    default:
      break;
%     else
%       _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%       end
      break;
    default:
      throw TAOX11_NAMESPACE::CORBA::BAD_PARAM ();
%     end
  }
%   end
  return this->u_.<%= _m.cxxname %>_;
}
% end

inline <%= scoped_cxx_out_type %> <%= scoped_cxxname %>::operator= (<%= scoped_cxx_in_type %> u)
{
  if (this != std::addressof(u))
  {
    <%= cxxtype %> tmp (u);
    this->swap (tmp);
  }
  return *this;
}

inline <%= scoped_cxx_out_type %> <%= scoped_cxxname %>::operator= (<%= scoped_cxx_move_type %> u)
{
  if (this != std::addressof(u))
  {
    <%= cxxtype %> tmp (std::move (u));
    this->swap (tmp);
  }
  return *this;
}

inline void <%= scoped_cxxname %>::swap (<%= scoped_cxx_out_type %> u)
{
  if (this != std::addressof(u))
  {
    if (this->disc_ != u.disc_)
    {
      // different datatypes; so use move semantics to swap efficiently through intermediary
      <%= scoped_cxxtype %> intermediate (std::move (*this));
      this->disc_ = std::move (u.disc_);
      this->_move_u (u);
      u.disc_ = std::move (intermediate.disc_);
      u._move_u (intermediate);
    }
    else
    {
      // same datatypes so swap directly
      this->_swap_u (u);
    }
  }
}

inline void <%= scoped_cxxname %>::_swap_u (<%= scoped_cxx_out_type %> u)
{
  // u_ members have been guaranteed initialized identically so simply swap data
% if switchtype_boolean?
%   _defmem = default_member
%   _ndefmem = non_default_members
%   if (_defmem && _ndefmem.empty?) || (!_ndefmem.empty? && _ndefmem.first.labels.size>1)
%     # in these cases there is only a single member mapping all labels
%     _m = _defmem || _ndefmem.shift
  std::swap (this->u_.<%= _m.cxxname %>_, u.u_.<%= _m.cxxname %>_);
%   else
%     # here we have 1 or 2 nondef members with or without a default
%     _m = _ndefmem.shift # get first non-default member
%     _lbl = _m.labels.first
  if (<%= _lbl == 'false' ? '!' : '' %>this->disc_)
  {
    std::swap (this->u_.<%= _m.cxxname %>_, u.u_.<%= _m.cxxname %>_);
  }
%     if _defmem || !_ndefmem.empty?
  else
  {
%     _m = _defmem || _ndefmem.shift # get other (non-)default member
    std::swap (this->u_.<%= _m.cxxname %>_, u.u_.<%= _m.cxxname %>_);
  }
%     end
%   end
% else
  switch (this->disc_)
  {
%   members.each do |_m|
%     unless _m.is_default?
%       _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%       end
    {
      std::swap (this->u_.<%= _m.cxxname %>_, u.u_.<%= _m.cxxname %>_);
    }
    break;
%     end
%   end
%   if needs_switch_default?
    default:
%     _m_def = has_default? ? default_member : members.first
    {
      std::swap (this->u_.<%= _m_def.cxxname %>_, u.u_.<%= _m_def.cxxname %>_);
    }
    break;
%   end
  }
% end
}

inline void <%= scoped_cxxname %>::_move_u (<%= scoped_cxx_inout_type %> u)
{
  // this->disc_ is guaranteed to be initialized with the value from u.disc_ so it's safe
  // to move/initialize the corresponding union members
% if switchtype_boolean?
%   _defmem = default_member
%   _ndefmem = non_default_members
%   if (_defmem && _ndefmem.empty?) || (!_ndefmem.empty? && _ndefmem.first.labels.size>1)
%     # in these cases there is only a single member mapping all labels
%     _m = _defmem || _ndefmem.shift
%     if _m.is_pod?
  this->u_.<%= _m.cxxname %>_ = std::move (u.u_.<%= _m.cxxname %>_);
%     else
  new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (std::move (u.u_.<%= _m.cxxname %>_));
%     end
%   else
%     # here we have 1 or 2 nondef members with or without a default
%     _m = _ndefmem.shift # get first non-default member
%     _lbl = _m.labels.first
  if (<%= _lbl == 'false' ? '!' : '' %>this->disc_)
  {
%     if _m.is_pod?
    this->u_.<%= _m.cxxname %>_ = std::move (u.u_.<%= _m.cxxname %>_);
%     else
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (std::move (u.u_.<%= _m.cxxname %>_));
%     end
  }
%     if _defmem || !_ndefmem.empty?
  else
  {
%     _m = _defmem || _ndefmem.shift # get other (non-)default member
%     if _m.is_pod?
    this->u_.<%= _m.cxxname %>_ = std::move (u.u_.<%= _m.cxxname %>_);
%     else
    new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (std::move (u.u_.<%= _m.cxxname %>_));
%     end
  }
%     end
%   end
% else
  switch (this->disc_)
  {
%   members.each do |_m|
%     unless _m.is_default?
%       _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%       end
    {
%       if _m.is_pod?
      this->u_.<%= _m.cxxname %>_ = std::move (u.u_.<%= _m.cxxname %>_);
%       else
      new (std::addressof(this->u_.<%= _m.cxxname %>_)) <%= _m.cxx_member_type %> (std::move (u.u_.<%= _m.cxxname %>_));
%       end
    }
    break;
%     end
%   end
%   if needs_switch_default?
    default:
%     _m_def = has_default? ? default_member : members.first
    {
%     if _m_def.is_pod?
      this->u_.<%= _m_def.cxxname %>_ = std::move (u.u_.<%= _m_def.cxxname %>_);
%     else
      new (std::addressof(this->u_.<%= _m_def.cxxname %>_)) <%= _m_def.cxx_member_type %> (std::move (u.u_.<%= _m_def.cxxname %>_));
%     end
    }
    break;
%   end
  }
% end
}

inline void <%= scoped_cxxname %>::_clear ()
{
% if switchtype_boolean?
%   _defmem = default_member
%   _ndefmem = non_default_members
%   if (_defmem && _ndefmem.empty?) || (!_ndefmem.empty? && _ndefmem.first.labels.size>1)
%     # in these cases there is only a single member mapping all labels
%     _m = _defmem || _ndefmem.shift
%     unless _m.is_pod?
%# Workaround for clang, see https://bugs.llvm.org/show_bug.cgi?id=12350
%       unless _m.is_reference?
#if defined __clang__ && __clang_major__ <= 8
  using <%= _m.cxx_member_type %>;
#endif /* __clang__ && __clang_major__ <= 8 */
%       end
  this->u_.<%= _m.cxxname %>_.<%= _m.cxx_member_type %>::~<%= _m.cxx_member_type_name %> ();
%     end
%   else
%     # here we have 1 or 2 nondef members with or without a default
%     _m = _ndefmem.shift # get first non-default member
%     _lbl = _m.labels.first
%     unless _m.is_pod?
  if (<%= _lbl == 'false' ? '!' : '' %>this->disc_)
  {
%# Workaround for clang, see https://bugs.llvm.org/show_bug.cgi?id=12350
%       unless _m.is_reference?
#if defined __clang__ && __clang_major__ <= 8
    using <%= _m.cxx_member_type %>;
#endif /* __clang__ && __clang_major__ <= 8 */
%       end
    this->u_.<%= _m.cxxname %>_.<%= _m.cxx_member_type %>::~<%= _m.cxx_member_type_name %> ();
  }
%     end
%     if _defmem || !_ndefmem.empty?
%       _m2 = _defmem || _ndefmem.shift # get other (non-)default member
%       unless _m2.is_pod?
%         if _m.is_pod?
%           _lbl = _m2.labels.first
  if (<%= _lbl == 'false' ? '!' : '' %>this->disc_)
%         else
  else
%         end
%           _m = _m2
  {
%# Workaround for clang, see https://bugs.llvm.org/show_bug.cgi?id=12350
%       unless _m.is_reference?
#if defined __clang__ && __clang_major__ <= 8
    using <%= _m.cxx_member_type %>;
#endif /* __clang__ && __clang_major__ <= 8 */
%       end
    this->u_.<%= _m.cxxname %>_.<%= _m.cxx_member_type %>::~<%= _m.cxx_member_type_name %> ();
  }
%       end
%     end
%   end
% else
  switch (this->disc_)
  {
%   members.each do |_m|
%     unless _m.is_default?
%       _m.nondefault_labels.each do |_lbl|
    case <%= _lbl %>:
%       end
%       unless _m.is_pod?
    {
%# Workaround for clang, see https://bugs.llvm.org/show_bug.cgi?id=12350
%         unless _m.is_reference?
#if defined __clang__ && __clang_major__ <= 8
      using <%= _m.cxx_member_type %>;
#endif /* __clang__ && __clang_major__ <= 8 */
%         end
      this->u_.<%= _m.cxxname %>_.<%= _m.cxx_member_type %>::~<%= _m.cxx_member_type_name %> ();
    }
%       end
    break;
%     end
%   end
%   if needs_switch_default?
    default:
%     _m_def = has_default? ? default_member : members.first
%     unless _m_def.is_pod?
    {
%# Workaround for clang, see https://bugs.llvm.org/show_bug.cgi?id=12350
%       unless _m_def.is_reference?
#if defined __clang__ && __clang_major__ <= 8
      using <%= _m_def.cxx_member_type %>;
#endif /* __clang__ && __clang_major__ <= 8 */
%       end
      this->u_.<%= _m_def.cxxname %>_.<%= _m_def.cxx_member_type %>::~<%= _m_def.cxx_member_type_name %> ();
    }
%     end
    break;
%   end
  }
% end
}
% if has_implicit_default?

inline void <%= scoped_cxxname %>::_default ()
{
  this->_clear ();
  this->disc_ = <%= default_label %>;
%   if !members.first.is_pod?
  new (std::addressof(this->u_.<%= members.first.cxxname %>_)) <%= members.first.cxx_member_type %> ();
%   end
}
% end
