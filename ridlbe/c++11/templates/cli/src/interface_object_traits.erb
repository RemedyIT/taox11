
// generated from <%= ridl_template_path %>
% if is_abstract?
template <>
abstractbase_traits<<%= scoped_cxxtype %>>::ref_type
abstractbase_traits<<%= scoped_cxxtype %>>::narrow (
  abstractbase_reference<CORBA::AbstractBase> abref)
{
  abstractbase_traits<<%= scoped_cxxtype %>>::ref_type abref_t;

  if (abref)
  {
    using ab_type_t = <%= scoped_cxxtype %>;
    try {
      if (abref->_is_object ())
      {
        abref_t = abstractbase_reference<ab_type_t> (new ab_type_t(abref->proxy_));
      }
      else
      {
        abref_t = abstractbase_reference<ab_type_t> (
            std::dynamic_pointer_cast<ab_type_t> (abref.abs_));
      }
    }
    catch_tao_system_ex(_ex)
  }
  return abref_t;
}
% else
template<>
object_traits<<%= scoped_cxxtype %>>::shared_ptr_type
object_traits<<%= scoped_cxxtype %>>::lock_shared (
  <%= scoped_cxxtype %>* p)
{
  return std::dynamic_pointer_cast<<%= scoped_cxxtype %>> (p->_lock_shared ());
}
%   if is_remote?

template<>
object_reference<<%= scoped_cxxtype %>>
object_traits<<%= scoped_cxxtype %>>::narrow (
  object_reference<TAOX11_NAMESPACE::CORBA::Object> obj)
{
  if (obj)
  {
    if (obj->_is_local ())
    {
      return ref_type (std::dynamic_pointer_cast<<%= scoped_cxxtype %>> (obj.stub_));
    }
    // remote
    try
    {
      <%= scoped_proxy_cxxtype %>_ptr const _pp =
        <%= scoped_proxy_cxxtype %>::_narrow (obj->get_proxy ()->get ());
      if (!TAO_CORBA::is_nil (_pp))
      {
        return object_reference<<%= scoped_cxxtype %>> (
          new <%= scoped_cxxtype %> (_pp));
      }
    }
    catch_tao_system_ex(_ex)
  }

  return {};
}
%   end
% end
