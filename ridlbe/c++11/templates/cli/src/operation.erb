% unless interface.is_local?

// generated from <%= ridl_template_path %>
%   _args = arguments.dup
<%= scoped_cxx_return_type %>
<%= interface.cxxname %>::<%= cxxname %> (<% if _args.empty? %>)<% end %>
%   while !_args.empty?
%     _arg = _args.shift
    <%= _arg.scoped_stub_arg_type %> <%= _arg.cxxname %><%= _args.empty? ? ')' : ',' %>
%   end
{
%   if interface.is_abstract?
  if (!this->_is_object ())
    throw TAOX11_CORBA::NO_IMPLEMENT ();

  TAOX11_CORBA::Object::_ref_type _objref = this->_to_object ();
  TAO_CORBA::Object_ptr const _objptr = _objref->get_proxy ()->get ();
%   end
%   unless is_oneway? || is_void?
  TAOX11_NAMESPACE::Arg_Traits<<%= scoped_cxx_arg_type %>>::ret_val _taox11_retval;
%   else
  TAOX11_NAMESPACE::Arg_Traits<void>::ret_val _taox11_retval;
%   end

  try {
%   if interface.is_abstract?
    if (!_objptr->is_evaluated ())
      {
        TAO_CORBA::Object::tao_object_initialize (_objptr);
      }
%   else
    if (!this-><%= interface.proxy_cxxname.downcase %>_->is_evaluated ())
      {
        TAO_CORBA::Object::tao_object_initialize (this-><%= interface.proxy_cxxname.downcase %>_);
      }
%   end

%   arguments.each do |_arg|
%     case _arg.direction
%     when :in
    TAOX11_NAMESPACE::Arg_Traits<<%= _arg.scoped_cxx_arg_type %>>::in_arg_val _taox11_<%= _arg.cxxname %> {<%= _arg.cxxname %>};
%     when :out
    TAOX11_NAMESPACE::Arg_Traits<<%= _arg.scoped_cxx_arg_type %>>::out_arg_val _taox11_<%= _arg.cxxname %> {<%= _arg.cxxname %>};
%     when :inout
    TAOX11_NAMESPACE::Arg_Traits<<%= _arg.scoped_cxx_arg_type %>>::inout_arg_val _taox11_<%= _arg.cxxname %> {<%= _arg.cxxname %>};
%     end
%   end

    TAO_TAO::Argument *_tao_args [] =
    {
      std::addressof(_taox11_retval)
%   arguments.each do |_arg|
      , std::addressof(_taox11_<%= _arg.cxxname %>)
%   end
    };
%   if has_raises?

    static TAO_TAO::Exception_Data const _tao_exceptiondata [] =
    {
%     _member_count = raises.size
%     raises.each_with_index do |_ex, _index|
      {
        "<%= _ex.repository_id %>",
        TAOX11_NAMESPACE::UserExceptionProxy::in<<%= _ex.scoped_cxxname %>>::_alloc,
#if TAO_HAS_INTERCEPTORS == 1
%       if generate_typecode_support?
        TC_helper::get_tao_tc(<%= _ex.scoped_cxx_typecode %>)
%       else
        nullptr
%       end
#endif /* TAO_HAS_INTERCEPTORS */
      }<% if _index < (_member_count-1) %>,<% end %>
%     end
    };
%   end

    TAO_TAO::Invocation_Adapter _tao_call (
%   if interface.is_abstract?
      _objptr,
%   else
      this-><%= interface.proxy_cxxname.downcase %>_,
%   end
      _tao_args,
      <%= 1+argument_count %>, // Number of arguments in the _tao_args array
      "<%= name %>", // Operation to be called
      <%= name.size %>, // Number of characters in the operation name
% if generate_thrupoa_collocation?
      TAO_TAO::TAO_CO_NONE | TAO_TAO::TAO_CO_THRU_POA_STRATEGY
% else
      TAO_TAO::TAO_CO_NONE
% end
% if in_arguments.empty?
%   if is_oneway?
      , TAO_TAO::TAO_ONEWAY_INVOCATION
%   else
      , TAO_TAO::TAO_TWOWAY_INVOCATION
%   end
      , TAO_TAO::TAO_SYNCHRONOUS_INVOCATION
      , false
% else
%   if is_oneway?
      , TAO_TAO::TAO_ONEWAY_INVOCATION
%   end
% end
      );

    // Invoke the target passing in the array of exception data and
    // the size of this array
%   if has_raises?
    _tao_call.invoke (_tao_exceptiondata, <%= raises_count %>);
%   else
    _tao_call.invoke (nullptr, 0);
%   end
  }
  catch_tao_system_ex(_ex)
%   if has_raises?
  catch (const TAOX11_NAMESPACE::UserExceptionProxy::out& _ex) {
    _ex._raise_x11 ();
  }
%   end
% unless is_oneway? || is_void?
  return _taox11_retval.retn ();
% end
}
% end
