% unless interface.is_local?

// generated from <%= ridl_template_path %>
%   _args = out_arguments.dup
void
<%= interface.cxxname %>::<%= cxxname %> (<% if is_void? && _args.empty? %>)<% end %>
%   unless is_void?
    <%= scoped_cxx_in_type %> ami_return_val<%= _args.empty? ? ')' : ',' %>
%   end
%   while !_args.empty?
%     _arg = _args.shift
    <%= _arg.direction == :out ? _arg.scoped_cxx_in_type : _arg.scoped_cxx_inout_type%> <%= _arg.cxxname %><%= _args.empty? ? ')' : ',' %>
%   end
{
%   if interface.is_abstract?
  if (!this->_is_object ())
    throw TAOX11_CORBA::NO_IMPLEMENT ();

  TAOX11_CORBA::Object::_ref_type _objref = this->_to_object ();
  TAO_CORBA::Object_ptr const _objptr = _objref->get_proxy ()->get ();

%   end
  try
  {
%   if interface.is_abstract?
    if (!_objptr->is_evaluated ())
    {
      TAO_CORBA::Object::tao_object_initialize (_objptr);
    }
%   else
    if (!this-><%= interface.proxy_cxxname.downcase %>_->is_evaluated ())
    {
      TAO_CORBA::Object::tao_object_initialize (this-><%= interface.proxy_cxxname.downcase %>_);
    }
%   end

%   unless is_oneway? || is_void?
    TAOX11_NAMESPACE::Arg_Traits<<%= scoped_cxx_arg_type %>>::ret_val _taox11_retval;
%   else
    TAOX11_NAMESPACE::Arg_Traits<void>::ret_val _taox11_retval;
%   end
%   nr_arguments = 1
%   unless is_oneway? || is_void?
    TAOX11_NAMESPACE::Arg_Traits<<%= scoped_cxx_arg_type %>>::in_arg_val _taox11_ami_return_val {ami_return_val};
%     nr_arguments += 1
%   end
%   arguments.each do |_arg|
%     case _arg.direction
%     when :out
    TAOX11_NAMESPACE::Arg_Traits<<%= _arg.scoped_cxx_arg_type %>>::in_arg_val _taox11_<%= _arg.cxxname %> {<%= _arg.cxxname %>};
%       nr_arguments += 1
%     when :inout
    TAOX11_NAMESPACE::Arg_Traits<<%= _arg.scoped_cxx_arg_type %>>::inout_arg_val _taox11_<%= _arg.cxxname %> {<%= _arg.cxxname %>};
%       nr_arguments += 1
%     end
%   end

    TAO_TAO::Argument *_tao_args [] =
    {
      std::addressof(_taox11_retval)
%   unless is_oneway? || is_void?
      , std::addressof(_taox11_ami_return_val)
%   end
%   arguments.each do |_arg|
%     unless _arg.direction == :in
      , std::addressof(_taox11_<%= _arg.cxxname %>)
%     end
%   end
    };
%   if has_raises?

    static TAO_TAO::Exception_Data const _tao_exceptiondata [] =
    {
%     _member_count = raises.size
%     raises.each_with_index do |_ex, _index|
      {
        "<%= _ex.repository_id %>",
        TAOX11_NAMESPACE::UserExceptionProxy::in<<%= _ex.scoped_cxxname %>>::_alloc,
#if TAO_HAS_INTERCEPTORS == 1
%       if generate_typecode_support?
        TC_helper::get_tao_tc(<%= _ex.scoped_cxx_typecode %>)
%       else
        nullptr
%       end
#endif /* TAO_HAS_INTERCEPTORS */
      }<% if _index < (_member_count-1) %>,<% end %>
%     end
    };
%   end

    TAO_TAO::Invocation_Adapter _tao_call (
%   if interface.is_abstract?
      _objptr,
%   else
      this-><%= interface.proxy_cxxname.downcase %>_,
%   end
      _tao_args,
      <%= nr_arguments %>, // Number of arguments in the _tao_args array
      "<%= name %>", // Operation to be called
      <%= name.size %>, // Number of characters in the operation name
%   if generate_thrupoa_collocation?
      TAO_TAO::TAO_CO_NONE | TAO_TAO::TAO_CO_THRU_POA_STRATEGY
%   else
      TAO_TAO::TAO_CO_NONE
%   end
%   if in_arguments.empty?
%     if is_oneway?
      , TAO_TAO::TAO_ONEWAY_INVOCATION
%     else
      , TAO_TAO::TAO_TWOWAY_INVOCATION
%     end
      , TAO_TAO::TAO_SYNCHRONOUS_INVOCATION
      , false
%   else
%     if is_oneway?
      , TAO_TAO::TAO_ONEWAY_INVOCATION
%     end
%   end
      );

    // Invoke the target passing in the array of exception data and
    // the size of this array
%   if has_raises?
    _tao_call.invoke (_tao_exceptiondata, <%= raises_count %>);
%   else
    _tao_call.invoke (nullptr, 0);
%   end
  }
  catch_tao_system_ex(_ex)
}


void
<%= interface.proxy_cxxname %>::<%= name %>_reply_stub (
    TAO_InputCDR &_tao_in,
    TAO_MESSAGING::ReplyHandler_ptr _tao_reply_handler,
    TAO_CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  TAOX11_NAMESPACE::CORBA::object_traits<TAOX11_NAMESPACE::CORBA::Object>::ref_type _reply_handler_obj =
    TAOX11_NAMESPACE::CORBA::make_reference<TAOX11_CORBA::Object> (
      new TAOX11_NAMESPACE::Object_proxy (TAO_MESSAGING::ReplyHandler::_duplicate (_tao_reply_handler)));

  <%= interface.scoped_cxx_traits_type %>::ref_type _reply_handler =
    <%= interface.scoped_cxx_traits_type %>::narrow (std::move(_reply_handler_obj));

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
%   unless is_oneway? || is_void?
      <%= scoped_cxx_member_type %> _taox11_ami_return_val;
      if (!(_tao_in >> <%= cdr_to_fmt % "_taox11_ami_return_val" %>))
        throw TAOX11_NAMESPACE::CORBA::MARSHAL ();

%   end
%   arguments.each do |_arg|
%     case _arg.direction
%     when :out
      <%= _arg.scoped_cxx_member_type %> _<%= _arg.cxxname %>;
      if (!(_tao_in >> <%= _arg.cdr_to_fmt % "_#{_arg.cxxname}" %>))
        throw TAOX11_NAMESPACE::CORBA::MARSHAL ();

%     when :inout
      <%= _arg.scoped_cxx_member_type %> _<%= _arg.cxxname %>;
      if (!(_tao_in >> <%= _arg.cdr_to_fmt % "_#{_arg.cxxname}" %>))
        throw TAOX11_NAMESPACE::CORBA::MARSHAL ();

%     end
%   end
      // Invoke the call back method.
      _reply_handler-><%= cxxname %> (
%   _first = false
%   unless is_oneway? || is_void?
          _taox11_ami_return_val
%     _first = true
%   end
%   arguments.each do |_arg|
%     unless _arg.direction == :in
%       if _first
%         _sep = ", "
%       else
%         _sep = ""
%         _first = true
%       end
        <%= _sep %>_<%= _arg.cxxname %>
%     end
%   end
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
%   if has_raises?
      static TAO_TAO::Exception_Data const _tao_exceptions_data [] =
      {
%     _member_count = raises.size
%     raises.each_with_index do |_ex, _index|
        {
          "<%= _ex.repository_id %>",
          TAOX11_NAMESPACE::UserExceptionProxy::in<<%= _ex.scoped_cxxname %>>::_alloc,
#if TAO_HAS_INTERCEPTORS == 1
%       if generate_typecode_support?
          TC_helper::get_tao_tc(<%= _ex.scoped_cxx_typecode %>)
%       else
          nullptr
%       end
#endif /* TAO_HAS_INTERCEPTORS */
        }<% if _index < (_member_count-1) %>,<% end %>
%     end
      };

%   end
      ACE_Message_Block const * cdr = _tao_in.start ();

      TAO_CORBA::OctetSeq const _tao_marshaled_exception (
        static_cast <TAO_CORBA::ULong> (cdr->length ()),
        static_cast <TAO_CORBA::ULong> (cdr->length ()),
        reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
        false);

      TAOX11_NAMESPACE::CORBA::OctetSeq const _marshaled_exception =
        seq_to_x11<TAOX11_NAMESPACE::CORBA::OctetSeq> (_tao_marshaled_exception);

      IDL::traits<TAOX11_NAMESPACE::Messaging::ExceptionHolder>::ref_type _exception_holder =
        TAOX11_NAMESPACE::CORBA::make_reference<TAOX11_NAMESPACE::ExceptionHolder_i> (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION,
                                 _tao_in.byte_order (),
                                 _marshaled_exception,
%   if has_raises?
                                 _tao_exceptions_data,
%   else
                                 nullptr,
%   end
                                 <%= raises_count %>,
                                 _tao_in.char_translator (),
                                 _tao_in.wchar_translator ());

      _reply_handler-><%= name %>_excep (std::move(_exception_holder));
      break;
    }
    //TODO
    case TAO_AMI_REPLY_NOT_OK:
      //  Not even the spec mentions this case.
      //  We have to think about this case.
      break;
  }
}

void
<%= interface.cxxname %>::<%= name %>_excep (
    IDL::traits<TAOX11_NAMESPACE::Messaging::ExceptionHolder>::ref_type excep_holder)
{
  if (!this-><%= interface.proxy_cxxname.downcase %>_->is_evaluated ())
    {
      TAO_CORBA::Object::tao_object_initialize (this-><%= interface.proxy_cxxname.downcase %>_);
    }

  TAOX11_NAMESPACE::Arg_Traits<void>::ret_val _taox11_retval;
  TAOX11_NAMESPACE::Arg_Traits<TAOX11_NAMESPACE::Messaging::ExceptionHolder>::in_arg_val _taox11_excep_holder {excep_holder};

  TAO_TAO::Argument *_tao_args [] =
  {
    std::addressof(_taox11_retval),
    std::addressof(_taox11_excep_holder)
  };
%   if has_raises?

  static TAO_TAO::Exception_Data const _tao_exceptiondata [] =
  {
%     _member_count = raises.size
%     raises.each_with_index do |_ex, _index|
    {
      "<%= _ex.repository_id %>",
      TAOX11_NAMESPACE::UserExceptionProxy::in<<%= _ex.scoped_cxxname %>>::_alloc,
#if TAO_HAS_INTERCEPTORS == 1
%       if generate_typecode_support?
      TC_helper::get_tao_tc(<%= _ex.scoped_cxx_typecode %>)
%       else
      nullptr
%       end
#endif /* TAO_HAS_INTERCEPTORS */
    }<% if _index < (_member_count-1) %>,<% end %>
%     end
  };
%   end

  TAO_TAO::Invocation_Adapter _tao_call (
    this-><%= interface.proxy_cxxname.downcase %>_,
    _tao_args,
    2, // Number of arguments in the _tao_args array
    "<%= name %>_excep", // Operation to be called
    <%= name.size  + 6 %>, // Number of characters in the operation name
    TAO_TAO::TAO_CO_NONE | TAO_TAO::TAO_CO_THRU_POA_STRATEGY);

  // Invoke the target passing in the array of exception data and
  // the size of this array
%   if has_raises?
  _tao_call.invoke (_tao_exceptiondata, <%= raises_count %>);
%   else
  _tao_call.invoke (nullptr, 0);
%   end
}

% end # unless interface.is_local? || is_oneway?
