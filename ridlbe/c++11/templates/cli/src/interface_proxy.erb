
// generated from <%= ridl_template_path %>
<%= proxy_cxxname %>::<%= proxy_cxxname %> (
  TAO_Stub *objref,
  TAO_CORBA::Boolean _tao_collocated,
  TAO_Abstract_ServantBase *servant,
  TAO_ORB_Core *oc) :
    TAO_CORBA::Object (objref, _tao_collocated, servant, oc)
% if is_derived?
%   _bases = ancestors.dup.find_all { |_a| !_a.is_abstract? }
%   while !_bases.empty?
    , <%= _bases.shift.scoped_proxy_cxxname %> (objref, _tao_collocated, servant, oc)
%   end
% end
{
}

<%= proxy_cxxname %>::<%= proxy_cxxname %> (
  TAO_IOP::IOR *ior,
  TAO_ORB_Core *orb_core) :
    TAO_CORBA::Object (ior, orb_core)
% if is_derived?
%   _bases = ancestors.dup.find_all { |_a| !_a.is_abstract? }
%   while !_bases.empty?
    , <%= _bases.shift.scoped_proxy_cxxname %> (ior, orb_core)
%   end
% end
{
}

<%= proxy_cxxname %>::_ptr_type
<%= proxy_cxxname %>::_duplicate (_ptr_type obj)
{
  if (!TAO_CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

<%= proxy_cxxname %>::_ptr_type
<%= proxy_cxxname %>::_narrow (
  TAO_CORBA::Object::_ptr_type _tao_objref)
{
  return TAO_TAO::Narrow_Utils<<%= proxy_cxxname %>>::narrow (_tao_objref, "<%= repository_id %>");
}

<%= proxy_cxxname %>::_ptr_type
<%= proxy_cxxname %>::_unchecked_narrow (TAO_CORBA::Object::_ptr_type _tao_objref)
{
  return TAO_TAO::Narrow_Utils<<%= proxy_cxxname %>>::unchecked_narrow (_tao_objref);
}

<%= proxy_cxxname %>::_ptr_type
<%= proxy_cxxname %>::_nil ()
{
  return {};
}

TAO_CORBA::Boolean
<%= proxy_cxxname %>::_is_a (const char *value)
{
  return (
%   supported_interface_ids.each do |_repo_id|
    std::strcmp (value, "<%= _repo_id %>") == 0 ||
%   end
    <%= proxy_root_base %>::_is_a (value));
}

TAO_CORBA::Boolean
<%= proxy_cxxname %>::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

const char*
<%= proxy_cxxname %>::_interface_repository_id () const
{
  return "<%= repository_id %>";
}
