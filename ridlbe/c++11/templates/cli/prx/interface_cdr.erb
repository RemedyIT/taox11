
// generated from <%= ridl_template_path %>
% _traits_incl_guard_ = scoped_proxy_cxxname.to_include_guard
#if !defined (_<%= _traits_incl_guard_ %>_ARG_TRAITS_)
#define _<%= _traits_incl_guard_ %>_ARG_TRAITS_
namespace TAOX11_NAMESPACE
{
  // Arg traits specializations.
  template<>
  class  Arg_Traits<<%= scoped_cxxtype %>>
    : public Basic_Arg_Traits_T<
        <%= scoped_cxx_traits_type %>::ref_type,
% if generate_any_support?
        Any_Insert_Policy_Stream>
% else
        Any_Insert_Policy_Noop>
% end
  {
  };
} // namespace TAOX11_NAMESPACE
#endif // !_<%= _traits_incl_guard_ %>_ARG_TRAITS_

% _cdr_incl_guard_ = scoped_cxxname.to_include_guard
#if !defined (_INTF_<%= _cdr_incl_guard_ %>_CDR_OPS_)
#define _INTF_<%= _cdr_incl_guard_ %>_CDR_OPS_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// @name CDR streaming operator specializations for <%= scoped_cxxname %>
//@{
% if is_abstract?
%# Abstract interfaces
%#
<%= stub_export_macro %>TAO_CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    <%= scoped_cxx_in_type %>);
<%= stub_export_macro %>TAO_CORBA::Boolean operator>> (
    TAO_InputCDR &,
    <%= scoped_cxx_out_type %>);
% else
%# Remote interfaces
%#
<%= stub_export_macro %>TAO_CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    <%= scoped_cxx_in_type %> _tao_objref);
<%= stub_export_macro %>TAO_CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    <%= scoped_cxx_out_type %> _tao_objref);
% end
//@}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif // !_INTF_<%= _cdr_incl_guard_ %>_CDR_OPS_
