
// generated from <%= ridl_template_path %>
class <%= stub_export_macro %><%= proxy_cxxname %>
% if is_derived?
%   if !has_concrete_base?
    : public virtual <%= proxy_root_base %>
%     _first = false
%   else
%     _first = true
%   end
%   bases.find_all {|_b| !_b.is_abstract? }.each do |_base|
  <%= _first ? ': ' : ', ' %>public virtual <%= _base.scoped_proxy_cxxname %>
%     _first = false
%   end
% else
    : public virtual <%= proxy_root_base %>
% end
{
public:
  friend class TAO_TAO::Narrow_Utils<<%= proxy_cxxname %>>;
  friend struct TAOX11_CORBA::object_traits<<%= cxxname %>>;

  using _ptr_type = <%= proxy_cxxname %>*;
  using _var_type = TAO_Objref_Var_T<<%= proxy_cxxname %>>;
  using _out_type = TAO_Objref_Out_T<<%= proxy_cxxname %>>;

  static _ptr_type _duplicate (_ptr_type obj);
  static _ptr_type _narrow (TAO_CORBA::Object::_ptr_type obj);
  static _ptr_type _unchecked_narrow (TAO_CORBA::Object::_ptr_type obj);
  static _ptr_type _nil ();

  /// Determine if we are of the type specified by the @a type_id.
  TAO_CORBA::Boolean _is_a (const char *type_id) override;
  TAO_CORBA::Boolean marshal (TAO_OutputCDR &cdr) override;
  const char* _interface_repository_id () const override;
