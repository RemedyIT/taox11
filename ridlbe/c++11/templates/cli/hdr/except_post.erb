
  // generated from <%= ridl_template_path %>
  <%= cxxname %> ();
  ~<%= cxxname %> () noexcept override = default;
  <%= cxxname %> (const <%= cxxname %>&) = default;
  <%= cxxname %> (<%= cxxname %>&&) = default;
% if member_count > 0
%   _ms = members.dup
  explicit <%= cxxname %> (
%   unless _ms.empty?
%     _indent = (' ' * cxxname.size)+'  '
%     while !_ms.empty?
%       _m = _ms.shift
%       if _m.is_array?
           <%= _indent %><%= "#{_m.cxx_in_type} #{_m.cxxname}" %><%= _ms.empty? ? ');' : ',' %>
%       else
           <%= _indent %><%= "#{_m.cxx_byval_type} #{_m.cxxname}" %><%= _ms.empty? ? ');' : ',' %>
%       end
%     end
%   end
% end
  <%= cxx_out_type %> operator= (<%= cxx_in_type %>) = default;
  <%= cxx_out_type %> operator= (<%= cxx_move_type %>) = default;
% members.each do |_m|

  /// @copydoc <%= _m.doc_scoped_name %>
  //@{
  void <%= _m.cxxname %> (<%= _m.cxx_in_type %> _x11_<%= _m.cxxname %>) { this-><%= _m.cxxname %>_ = _x11_<%= _m.cxxname %>; }
%   unless _m.is_pod? || _m.is_reference?
  void <%= _m.cxxname %> (<%= _m.cxx_move_type %> _x11_<%= _m.cxxname %>)  { this-><%= _m.cxxname %>_ = std::move (_x11_<%= _m.cxxname %>); }
%   end
  <%= _m.cxx_in_type %> <%= _m.cxxname %> () const { return this-><%= _m.cxxname %>_; }
  <%= _m.cxx_out_type %> <%= _m.cxxname %> () { return this-><%= _m.cxxname %>_; };
  //@}
% end

protected:
  void _info (std::ostream&) const override;

private:
% members.each do |_m|
  <%= _m.cxx_member_type %> <%= _m.cxxname %>_<%= _m.zero_initializer %>;
% end
}; // class <%= cxxname %>
% visit_template('typecode') if generate_typecode_support?
