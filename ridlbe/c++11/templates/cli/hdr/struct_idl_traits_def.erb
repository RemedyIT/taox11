
// generated from <%= ridl_template_path %>
template <typename OStrm_>
struct formatter<<%= scoped_cxxtype %>, OStrm_>
{
  inline OStrm_& operator ()(
      OStrm_& os_,
% if (member_count > 0 && (!is_exception? || members.any? { |_m| !_m.is_object? })) || !base.nil?
      <%= scoped_cxx_in_type %> val_)
% else
      <%= scoped_cxx_in_type %>)
% end
  {
    os_ << "<%= formatted_cxxname %>"
        << '{'
% unless base.nil?
        << IDL::traits<<%= base.cxxname %>>::write(val_)<% if member_count > 0 %> << ","<% end %>
% end
%   _sep = nil
%   members.each do |_m|
%# NOTE: This special path is necessary since user exception code uses this formatter
%#       in the implementation of the virtual ::_info() method which triggers
%#       instantiation of all os writing related templates and inlines of the member types.
%#       In case of interfaces this may trigger instantiation of code that is not
%#       available because the interface used is only seen forward declared causing
%#       link errors in the end.
%     if is_exception? && _m.is_object?
        << "<%= _sep %><%= _m.cxxname %>=IDL::traits<<%= _m.formatted_cxxtype %>>::ref_type{"
%       if _m.is_local_object?
        << "local}"
%       elsif _m.is_abstractbase?
        << "abstract}"
%       else
        << "object}"
%       end
%     else
% if _m.optional?
        << "<%= _sep %><%= _m.cxxname %>=" << val_.<%= _m.cxxname %> ()
% elsif _m.external?
%# TODO
% else
        << "<%= _sep %><%= _m.cxxname %>=" << IDL::traits<<%= _m.scoped_cxxtype %>>::write(val_.<%= _m.cxxname %> ())
% end
%     end
%     _sep = ',' unless _sep
%   end
        << '}';
    return os_;
  }
};

template <typename OStrm_, typename Fmt>
inline OStrm_& operator <<(OStrm_& os, IDL::traits<<%= scoped_cxxtype %>>::__Writer<Fmt> w)
{
  using writer_t = IDL::traits<<%= scoped_cxxtype %>>::__Writer<Fmt>;
  using formatter_t = typename std::conditional<
                        std::is_same<
                          typename writer_t::formatter_t,
                          std::false_type>::value,
                        formatter<<%= scoped_cxxtype %>, OStrm_>,
                        typename writer_t::formatter_t>::type;
  return IDL::traits<<%= scoped_cxxtype %>>::write_on (os, w.val_, formatter_t ());
}
