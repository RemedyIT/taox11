
  // generated from <%= ridl_template_path %>
% if has_implicit_default? || has_default?
  /// Default constructor creating an union initialized to
  /// the default cause
% else
  /// Default constructor creating an empty union
%end
  <%= cxxname %> () = default;
  /// Copy constructor
  inline <%= cxxname %> (<%= cxx_in_type %>);
  /// Move constructor
  inline <%= cxxname %> (<%= cxx_move_type %>);
  /// Destructor
  inline ~<%= cxxname %> ();
  /// Copy assignment operator
  inline <%= cxxtype %> &operator= (<%= cxx_in_type %>);
  /// Move assignment operator
  inline <%= cxxtype %> &operator= (<%= cxx_move_type %>);

  /// Set the discriminator. Only possible to set it to a
  /// value within the same current union member, otherwise
  /// a BAD_PARAM exception is thrown
  inline void _d (<%= switch_in_cxxtype %>);
  /// Get the discriminator
  inline <%= switch_in_cxxtype %> _d () const  { return this->disc_; }
% members.each do |_m|

  /// @copydoc <%= _m.doc_scoped_name %>
  //@{
  /// Set the value of the union, the discriminator is automatically
  /// set to the correct value
  inline void <%= _m.cxxname %> (<%= _m.cxx_in_type %> _x11_<%= _m.cxxname %>);
%   unless _m.is_pod? || _m.is_reference?
  /// Set the value of the union, the discriminator is automatically
  /// set to the correct value
  inline void <%= _m.cxxname %> (<%= _m.cxx_move_type %> _x11_<%= _m.cxxname %>);
%   end
  /// Get the value of the union, if the discriminator doesn't match a
  /// BAD_PARAM exception is thrown
  inline <%= _m.cxx_in_type %> <%= _m.cxxname %> () const;
  /// Get the value of the union, if the discriminator doesn't match a
  /// BAD_PARAM exception is thrown
  inline <%= _m.cxx_out_type %> <%= _m.cxxname %> ();
  //@}
% end
% if has_implicit_default?

  /// Modifier that sets the union to a legal default value
  inline void _default ();
% end

  /// Exchange the value of two unions in an efficient matter
  inline void swap (<%= cxx_inout_type %> u);

private:
  inline void _swap_u (<%= cxx_inout_type %> u);
  inline void _move_u (<%= cxx_inout_type %> u);
  inline void _clear ();

  <%= switch_cxxtype %> disc_ {<% if has_default?() || has_implicit_default?() %><%= default_label %><% else %><%= members.first.nondefault_labels.first %><% end %>};
  union u_type_
  {
#if (defined (_MSC_VER) && (_MSC_VER < 1930))
    u_type_ ();
#else
    u_type_ () = default;
#endif
    ~u_type_ ();
% members.each do |_m|
% # The default member or the first member should use the zero_initializer
% # Visual Studio 2019 doesn't seem to like using default, this leads to
% # an internal compiler error, see SW331
#if (defined (_MSC_VER) && (_MSC_VER < 1930))
    <%= _m.cxx_member_type %> <%= _m.cxxname %>_;
#else
    <%= _m.cxx_member_type %> <%= _m.cxxname %>_<% if (has_default?() && _m.is_default?) || (!has_default?() && _m == members.first) %> <%= _m.zero_initializer %><% end %>;
#endif
% end
  } u_ {};
}; // class <%= cxxname %>

inline void swap (<%= scoped_cxx_out_type %> m1, <%= scoped_cxx_out_type %> m2) { m1.swap (m2); }

% visit_template('typecode') if generate_typecode_support?
