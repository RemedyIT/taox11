
// generated from <%= ridl_template_path %>
% _vt_traits_decl_incl_guard_ = scoped_cxxname.to_include_guard
#if !defined (_VALUETYPE_<%= _vt_traits_decl_incl_guard_ %>_TRAITS_DECL_)
#define _VALUETYPE_<%= _vt_traits_decl_incl_guard_ %>_TRAITS_DECL_
namespace TAOX11_NAMESPACE
{
% if has_factory?
  namespace CORBA
  {
    template<>
    <%= stub_export_macro %> object_traits<<%= scoped_factory_cxx_type %>>::shared_ptr_type
    object_traits<<%= scoped_factory_cxx_type %>>::lock_shared (<%= scoped_factory_cxx_type %>*);
  } // namespace CORBA

  namespace IDL
  {
    template<>
    struct traits <<%= scoped_factory_cxx_type %>> :
      public IDL::common_byval_traits <CORBA::object_reference <<%= scoped_factory_cxx_type %>>>,
      public CORBA::object_traits <<%= scoped_factory_cxx_type %>>
    {
      using is_abstract = std::false_type;
      using is_local = std::true_type;
    };
  } // namespace IDL

% end
  namespace CORBA
  {
    template <>
    struct <%= stub_export_macro %>valuetype_traits<<%= scoped_cxxtype %>>
    {
      using base_type = <%= scoped_cxxtype %>;
      /// Strong reference type
      using ref_type = valuetype_reference<<%= scoped_cxxtype %>>;
      /// Weak reference type
      using weak_ref_type = weak_valuetype_reference<<%= scoped_cxxtype %>>;
% unless is_abstract?
      using obv_type = <%= scoped_obv_cxxtype %>;
% end
% if has_factory?
      using factory_type = <%= scoped_factory_cxx_type %>;
      using factory_ref_type = <%= scoped_factory_traits_type %>::ref_type;
      using weak_factory_ref_type = <%= scoped_factory_traits_type %>::weak_ref_type;
% elsif !is_abstract?
      using factory_type = CORBA::ValueFactoryBase;
      using factory_ref_type = IDL::traits<CORBA::ValueFactoryBase>::ref_type;
      using weak_factory_ref_type = IDL::traits<CORBA::ValueFactoryBase>::weak_ref_type;
% end
      template <typename _Tp1, typename = typename
          std::enable_if<std::is_convertible<<%= scoped_cxxtype %>*, _Tp1*>::value>::type>
      static ref_type narrow (valuetype_reference<_Tp1> base)
      {
        return ref_type::_narrow (std::move(base));
      }

      template <typename TInst = <%= scoped_cxxtype %>,
                typename = typename
                  std::enable_if<std::is_base_of<<%= scoped_cxxtype %>, TInst>::value>::type,
                typename ...Args>
      inline static ref_type make_reference(Args&& ...args)
      {
        return TAOX11_CORBA::make_reference<TInst> (std::forward<Args> (args)...);
      }
    };
  } // namespace CORBA

  namespace IDL
  {
    template<>
    struct traits <<%= scoped_cxxtype %>>
      : public IDL::common_byval_traits<CORBA::valuetype_reference<<%= scoped_cxxtype %>>>,
        public CORBA::valuetype_traits <<%= scoped_cxxtype %>>
    {
      using is_abstract = std::<%= is_abstract? %>_type;
      using is_truncatable = std::<%= is_truncatable? %>_type;

      template <typename OStrm_, typename Formatter = formatter<<%= scoped_cxxtype %>, OStrm_>>
      static inline OStrm_& write_on(
          OStrm_& os_, in_type val_,
          Formatter fmt_ = Formatter ())
      {
        return fmt_ (os_, val_);
      }

      template <typename Formatter = std::false_type>
      static inline __Writer<Formatter> write (in_type val) { return {val}; }
    };
  } // namespace IDL
} // namespace TAOX11_NAMESPACE
#endif // !_VALUETYPE_<%= _vt_traits_decl_incl_guard_ %>_TRAITS_DECL_
