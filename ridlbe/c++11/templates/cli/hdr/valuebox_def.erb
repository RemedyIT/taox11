
// generated from <%= ridl_template_path %>
class <%= stub_export_macro %><%= cxxname %> final
  : public TAOX11_CORBA::Valuebox_T<<%= scoped_boxed_cxx_member_type %>>
{
public:
  /// @name Member types
  //@{
  using _traits_type = TAOX11_CORBA::valuetype_traits<<%= cxxname %>>;
  using _ref_type = TAOX11_CORBA::valuetype_reference<<%= cxxname %>>;
  //@}

  void _value (<%= boxed_cxx_in_type %> v) { this->value_ = v; }
% unless boxed_type_is_pod? || boxed_type_is_reference?
  void _value (<%= boxed_cxx_move_type %> v) { this->value_ = std::move (v); }
% end
  <%= boxed_cxx_in_type %> _value () const { return this->value_; }
  <%= boxed_cxx_out_type %> _value () { return this->value_; }

  TAOX11_IDL::traits<TAOX11_CORBA::ValueBase>::ref_type _copy_value () const override;

  static bool _obv_unmarshal (TAO_InputCDR &strm, _ref_type &vbox);
% if generate_typecode_support?

  TAOX11_CORBA::typecode_reference _obv_typecode () const override;
% end

protected:
  template <typename _Tp1, typename, typename ...Args>
  friend TAOX11_CORBA::valuetype_reference<_Tp1> TAOX11_CORBA::make_reference(Args&& ...args);

  static const std::string __<%= cxxname.downcase %>_repository_id;

  <%= cxxname %> () = default;
  <%= cxxname %> (const <%= cxxname %>&) = default;
  <%= cxxname %> (<%= cxxname %>&&) = default;
  explicit <%= cxxname %> (<%= boxed_cxx_byval_type %> v)
    : TAOX11_CORBA::Valuebox_T<<%= scoped_boxed_cxx_member_type %>> (std::move(v))
  {}
  ~<%= cxxname %> () override = default;
  <%= cxxname %>& operator= (const <%= cxxname %>&) = delete;
  <%= cxxname %>& operator= (<%= cxxname %>&&) = delete;

  const std::string& _obv_repository_id () const override;

  bool _obv_marshal_v (TAO_OutputCDR &) const override;
};
%#
% visit_template('typecode') if generate_typecode_support?
