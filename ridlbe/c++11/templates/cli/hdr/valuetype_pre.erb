
// generated from <%= ridl_template_path %>
class <%= stub_export_macro %><%= cxxname %>
% if is_derived?
%   _first = true
%   bases.each do |_base|
  <%= _first ? ':' : ',' %> public virtual <%= _base.scoped_cxxname %>
%     _first = false
%   end
% else
  : public virtual TAOX11_CORBA::ValueBase
% end
% abstract_interfaces.each do |_if|
  , public virtual <%= _if.scoped_cxxname %>
% end
{
public:
  /// @name Member types
  //@{
  using _traits_type = <%= cxx_traits_type %>;
  /// Strong reference type
  using _ref_type = <%= cxx_traits_type %>::ref_type;
% if has_factory?
  using _factory_type = <%= cxx_traits_type %>::factory_type;
% end
% unless is_abstract?
  using _obv_type = <%= cxx_traits_type %>::obv_type;
% end
  //@}

  static bool _obv_unmarshal (TAO_InputCDR &strm, _ref_type &vbox);

% if generate_typecode_support? && !is_abstract?
  TAOX11_CORBA::typecode_reference _obv_typecode () const override;
% end

% if supports_abstract_interfaces?
  // from CORBA::AbstractBase
  TAOX11_IDL::traits<TAOX11_CORBA::Object>::ref_type _to_object () override;
  TAOX11_IDL::traits<TAOX11_CORBA::ValueBase>::ref_type _to_value () override;

% end
protected:
% if has_factory?
  friend class <%= factory_cxxname %>;

% end
  using _shared_ptr_type = std::shared_ptr<<%= cxxname %>>;

  static const std::string __<%= cxxname.downcase %>_repository_id;

% if is_truncatable?
  <%= cxxname %> ();
% else
  <%= cxxname %> () = default;
% end
  ~<%= cxxname %> () override = default;
  <%= cxxname %> (const <%= cxxname %>&) = default;
  <%= cxxname %> (<%= cxxname %>&&) = default;
  <%= cxxname %>& operator= (const <%= cxxname %>&) = delete;
  <%= cxxname %>& operator= (<%= cxxname %>&&) = delete;

  const std::string& _obv_repository_id () const override;
  void _obv_get_truncatable_repo_ids (std::vector<std::string const*>&) const override;

% unless is_abstract?
  bool _obv_match_formal_type (ptrdiff_t ) const override;

  bool _obv_marshal_v (TAO_OutputCDR &) const override;
  bool _obv_unmarshal_v (TAO_InputCDR &) override;
% end
% if supports_abstract_interfaces?

  template <typename T>
  friend class TAOX11_CORBA::valuetype_reference;

  // from CORBA::ValueBase
  TAOX11_IDL::traits<TAOX11_CORBA::AbstractBase>::ref_type _obv_abstract_base () override;

  // from CORBA::AbstractBase
  bool _is_object () override;
  TAOX11_CORBA::ValueBase::_shared_ptr_type _lock_shared ();
% end
public:
