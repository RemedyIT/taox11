% write_regen_section(server_name+'.cpp[Header]', header: true) do
/**
 * @file    <%= server_name %>.cpp
 * @author  Unknown
 * @brief   Server main
 *
 * Generated by 'brix11 generate server' @ <%= Time.now %>
 */
% end

% idl_names.each do |i|
#include "<%= i %>S.h"
% end
% if has_servant_implementation?
%   implementation_names.each do |i|
#include "<%= i %>.h"
%   end
% end

#include "ace/Get_Opt.h"
#include "tao/x11/log.h"
#include <fstream>
% write_regen_section(server_name+'.cpp[User Includes]', default_content: '// Your includes/code here')

std::string ior_file = "server.ior";

% write_regen_section(server_name+'.cpp[Argument Parsing]') do
bool
parse_args (int argc, char *argv[])
{
  ACE_Get_Opt get_opts (argc, argv, ACE_TEXT("o:"));
  int c;

  while ((c = get_opts ()) != -1)
    switch (c)
      {
      case 'o':
        ior_file = get_opts.opt_arg ();
        break;

      case '?':
      default:
        taox11_error << "usage: -o <iorfile>"
              << std::endl;
        return false;
      }
  // Indicates successful parsing of the command line
  return true;
}
% end

int
main(int argc, char *argv[])
{
  try
    {
% write_regen_section(server_name+'.cpp[User Startup]', default_content: '// Your startup code here', indent: 3)
      IDL::traits<CORBA::ORB>::ref_type _orb = CORBA::ORB_init (argc, argv);

      if (!_orb)
        {
          taox11_error
            << "ERROR: CORBA::ORB_init (argc, argv) returned null ORB."
            << std::endl;
          return 1;
        }

% write_regen_section(server_name+'.cpp[User Arguments]', indent: 3) do
      // Your argument handling here
      if (!parse_args (argc, argv))
        return 1;

% end
      IDL::traits<CORBA::Object>::ref_type obj =
        _orb->resolve_initial_references ("RootPOA");

      if (!obj)
        {
          taox11_error
            << "ERROR: resolve_initial_references (\"RootPOA\") returned null reference." << std::endl;
          return 1;
        }

      taox11_info << "retrieved RootPOA object reference" << std::endl;

      IDL::traits<PortableServer::POA>::ref_type root_poa =
        IDL::traits<PortableServer::POA>::narrow (obj);

      if (!root_poa)
        {
          taox11_error
            << "ERROR: IDL::traits<PortableServer::POA>::narrow (obj) returned null object."
            << std::endl;
          return 1;
        }

      taox11_info << "narrowed POA interface" << std::endl;

      IDL::traits<PortableServer::POAManager>::ref_type poaman =
        root_poa->the_POAManager ();

      if (!poaman)
        {
          taox11_error
            << "ERROR: root_poa->the_POAManager () returned null object."
            << std::endl;
          return 1;
        }
<% if has_servant_implementation? %>

      CORBA::servant_traits< <%= scoped_interface %>>::ref_type <%= servant_impl_obj %> =
        CORBA::make_reference< <%= servant_impl_name %>> (_orb);

      taox11_info << "created <%= scoped_interface %> servant" << std::endl;

      PortableServer::ObjectId id = root_poa->activate_object (<%= servant_impl_obj %>);

      taox11_info << "activated <%= scoped_interface %> servant" << std::endl;

      obj = root_poa->id_to_reference (id);

      if (!obj)
        {
          taox11_error
            << "ERROR: root_poa->id_to_reference (id) returned null reference."
            << std::endl;
          return 1;
        }

      IDL::traits< <%= scoped_interface %>>::ref_type <%= interface_obj %> =
        IDL::traits< <%= scoped_interface %>>::narrow (obj);

      if (!<%= interface_obj %>)
        {
          taox11_error
            << "ERROR: IDL::traits< <%= scoped_interface %>>::narrow (obj) returned null reference."
            << std::endl;
          return 1;
        }

      std::string ior = _orb->object_to_string (<%= interface_obj %>);

      // Output the IOR to the <ior_output_file>
      std::ofstream fos(ior_file);
      if (!fos)
        {
          taox11_error << "ERROR: failed to open file '" << ior_file << "'" << std::endl;
          return 1;
        }
      fos << ior;
      fos.close ();

      taox11_info << "IOR for <%= scoped_interface %> servant written to '" << ior_file << "' : " << ior
        << std::endl;

<% end %>
% write_regen_section(server_name+'.cpp[User Activation]', default_content: '// Your code here', indent: 3)

      poaman->activate ();

      taox11_info << "starting event loop" << std::endl;

      _orb->run ();

      taox11_info << "event loop finished" << std::endl;

      root_poa->destroy (true, true);

      _orb->destroy ();
    }
  catch (const std::exception& e)
    {
      taox11_error << "exception caught: " << e << std::endl;
      return 1;
    }

  return 0;
}

% write_regen_section(server_name+'.cpp[User Code]', default_content: '// Your code here', footer: true)
